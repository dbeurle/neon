
#include "pyramid.hpp"

#include <array>
#include <memory>
#include <tuple>

namespace neon
{
pyramid5::pyramid5() : volume_interpolation(5, 0, 0)
{
    m_local_coordinates = {{0, 1.0, 0.0, -1.0},
                           {1, 0.0, 1.0, -1.0},
                           {2, 0.0, 0.0, -1.0},
                           {3, 1.0, 0.0, 1.0},
                           {4, 0.0, 1.0, 1.0}};
}

auto pyramid5::evaluate(coordinate_type const& coordinate) const noexcept(false) -> value_type
{
    [[maybe_unused]] auto const& [l, u1, u2, u3] = coordinate;

    vector N(5);
    matrix dN(5, 3);

    N(0) = -(u1 - u3 + 1) * (u2 - u3 + 1) / (4 * (u3 - 1));
    N(1) = (u1 + u3 - 1) * (u2 - u3 + 1) / (4 * (u3 - 1));
    N(2) = -(u1 + u3 - 1) * (u2 + u3 - 1) / (4 * (u3 - 1));
    N(3) = (u1 - u3 + 1) * (u2 + u3 - 1) / (4 * (u3 - 1));
    N(4) = u3;

    dN(0, 0) = -(u2 - u3 + 1) / (4 * u3 - 4);
    dN(1, 0) = (u2 - u3 + 1) / (4 * (u3 - 1));
    dN(2, 0) = -(u2 + u3 - 1) / (4 * u3 - 4);
    dN(3, 0) = (u2 + u3 - 1) / (4 * (u3 - 1));
    dN(4, 0) = 0;

    dN(0, 1) = -(u1 - u3 + 1) / (4 * u3 - 4);
    dN(1, 1) = (u1 + u3 - 1) / (4 * (u3 - 1));
    dN(2, 1) = -(u1 + u3 - 1) / (4 * u3 - 4);
    dN(3, 1) = (u1 - u3 + 1) / (4 * (u3 - 1));
    dN(4, 1) = 0;

    dN(0, 2) = (u1 * u2 - std::pow(u3, 2) + 2 * u3 - 1) / (4 * (std::pow(u3, 2) - 2 * u3 + 1));
    dN(1, 2) = -(u1 * u2 + std::pow(u3, 2) - 2 * u3 + 1) / (4 * std::pow(u3, 2) - 8 * u3 + 4);
    dN(2, 2) = (u1 * u2 - std::pow(u3, 2) + 2 * u3 - 1) / (4 * (std::pow(u3, 2) - 2 * u3 + 1));
    dN(3, 2) = -(u1 * u2 + std::pow(u3, 2) - 2 * u3 + 1) / (4 * std::pow(u3, 2) - 8 * u3 + 4);
    dN(4, 2) = 1;

    return {N, dN};
}

pyramid13::pyramid13() : volume_interpolation(13, 0, 0)
{
    m_local_coordinates = {{0, 1.0, 0.0, -1.0},
                           {1, 0.0, 1.0, -1.0},
                           {2, 0.0, 0.0, -1.0},
                           {3, 0.5, 0.5, -1.0},
                           {4, 0.0, 0.5, -1.0},
                           {5, 0.5, 0.0, -1.0},
                           //
                           {6, 1.0, 0.0, 0.0},
                           {7, 0.0, 1.0, 0.0},
                           {8, 0.0, 0.0, 0.0},
                           //
                           {9, 1.0, 0.0, 1.0},
                           {10, 0.0, 1.0, 1.0},
                           {11, 0.0, 0.0, 1.0},
                           {12, 0.0, 0.0, 1.0}};
}

auto pyramid13::evaluate(coordinate_type const& coordinate) const noexcept(false) -> value_type
{
    [[maybe_unused]] auto const& [l, u1, u2, u3] = coordinate;

    vector N(13);
    matrix dN(13, 3);

    N(0) = -(u1 + u2 - 1) * (u1 - u3 + 1) * (u2 - u3 + 1) / (4 * (u3 - 1));
    N(1) = (u1 - u3 + 1) * (u1 + u3 - 1) * (u2 - u3 + 1) / (2 * (u3 - 1));
    N(2) = -(u1 - u2 + 1) * (u1 + u3 - 1) * (u2 - u3 + 1) / (4 * (u3 - 1));
    N(3) = -(u1 + u3 - 1) * (u2 - u3 + 1) * (u2 + u3 - 1) / (2 * (u3 - 1));
    N(4) = (u1 + u2 + 1) * (u1 + u3 - 1) * (u2 + u3 - 1) / (4 * (u3 - 1));
    N(5) = -(u1 - u3 + 1) * (u1 + u3 - 1) * (u2 + u3 - 1) / (2 * (u3 - 1));
    N(6) = (u1 - u2 - 1) * (u1 - u3 + 1) * (u2 + u3 - 1) / (4 * (u3 - 1));
    N(7) = (u1 - u3 + 1) * (u2 - u3 + 1) * (u2 + u3 - 1) / (2 * (u3 - 1));
    N(8) = -u3 * (u1 - u3 + 1) * (u2 - u3 + 1) / (u3 - 1);
    N(9) = u3 * (u1 + u3 - 1) * (u2 - u3 + 1) / (u3 - 1);
    N(10) = -u3 * (u1 + u3 - 1) * (u2 + u3 - 1) / (u3 - 1);
    N(11) = u3 * (u1 - u3 + 1) * (u2 + u3 - 1) / (u3 - 1);
    N(12) = u3 * (2 * u3 - 1);

    dN(0, 0) = -(2 * u1 * u2 - 2 * u1 * u3 + 2 * u1 + std::pow(u2, 2) - 2 * u2 * u3 + u2
                 + std::pow(u3, 2) - u3)
               / (4 * u3 - 4);
    dN(1, 0) = u1 * (u2 - u3 + 1) / (u3 - 1);
    dN(2, 0) = -(2 * u1 * u2 - 2 * u1 * u3 + 2 * u1 - std::pow(u2, 2) + 2 * u2 * u3 - u2
                 - std::pow(u3, 2) + u3)
               / (4 * u3 - 4);
    dN(3, 0) = -(u2 - u3 + 1) * (u2 + u3 - 1) / (2 * u3 - 2);
    dN(4, 0) = (2 * u1 * u2 + 2 * u1 * u3 - 2 * u1 + std::pow(u2, 2) + 2 * u2 * u3 - u2
                + std::pow(u3, 2) - u3)
               / (4 * (u3 - 1));
    dN(5, 0) = -u1 * (u2 + u3 - 1) / (u3 - 1);
    dN(6, 0) = (2 * u1 * u2 + 2 * u1 * u3 - 2 * u1 - std::pow(u2, 2) - 2 * u2 * u3 + u2
                - std::pow(u3, 2) + u3)
               / (4 * (u3 - 1));
    dN(7, 0) = (u2 - u3 + 1) * (u2 + u3 - 1) / (2 * (u3 - 1));
    dN(8, 0) = -u3 * (u2 - u3 + 1) / (u3 - 1);
    dN(9, 0) = u3 * (u2 - u3 + 1) / (u3 - 1);
    dN(10, 0) = -u3 * (u2 + u3 - 1) / (u3 - 1);
    dN(11, 0) = u3 * (u2 + u3 - 1) / (u3 - 1);
    dN(12, 0) = 0.0;

    dN(0, 1) = -(std::pow(u1, 2) + 2 * u1 * u2 - 2 * u1 * u3 + u1 - 2 * u2 * u3 + 2 * u2
                 + std::pow(u3, 2) - u3)
               / (4 * u3 - 4);
    dN(1, 1) = (u1 - u3 + 1) * (u1 + u3 - 1) / (2 * (u3 - 1));
    dN(2, 1) = -(std::pow(u1, 2) - 2 * u1 * u2 + 2 * u1 * u3 - u1 - 2 * u2 * u3 + 2 * u2
                 + std::pow(u3, 2) - u3)
               / (4 * u3 - 4);
    dN(3, 1) = -u2 * (u1 + u3 - 1) / (u3 - 1);
    dN(4, 1) = (std::pow(u1, 2) + 2 * u1 * u2 + 2 * u1 * u3 - u1 + 2 * u2 * u3 - 2 * u2
                + std::pow(u3, 2) - u3)
               / (4 * (u3 - 1));
    dN(5, 1) = -(u1 - u3 + 1) * (u1 + u3 - 1) / (2 * u3 - 2);
    dN(6, 1) = (std::pow(u1, 2) - 2 * u1 * u2 - 2 * u1 * u3 + u1 + 2 * u2 * u3 - 2 * u2
                + std::pow(u3, 2) - u3)
               / (4 * (u3 - 1));
    dN(7, 1) = u2 * (u1 - u3 + 1) / (u3 - 1);
    dN(8, 1) = -u3 * (u1 - u3 + 1) / (u3 - 1);
    dN(9, 1) = u3 * (u1 + u3 - 1) / (u3 - 1);
    dN(10, 1) = -u3 * (u1 + u3 - 1) / (u3 - 1);
    dN(11, 1) = u3 * (u1 - u3 + 1) / (u3 - 1);
    dN(12, 1) = 0.0;

    dN(0, 2) = -(u1 + u2 - 1) * (-u1 * u2 * u3 + u1 * u2 * (u3 - 1) + std::pow(u3 - 1, 2))
               / (4 * std::pow(u3 - 1, 2));
    dN(1, 2) = (-std::pow(u1, 2) * u2 / 2 - u2 * std::pow(u3, 2) / 2 + u2 * u3 - u2 / 2
                + std::pow(u3, 3) - 3 * std::pow(u3, 2) + 3 * u3 - 1)
               / (std::pow(u3, 2) - 2 * u3 + 1);
    dN(2, 2) = (u1 - u2 + 1) * (u1 * u2 * u3 - u1 * u2 * (u3 - 1) + std::pow(u3 - 1, 2))
               / (4 * std::pow(u3 - 1, 2));
    dN(3, 2) = (u1 * std::pow(u2, 2) + u1 * std::pow(u3, 2) - 2 * u1 * u3 + u1 + 2 * std::pow(u3, 3)
                - 6 * std::pow(u3, 2) + 6 * u3 - 2)
               / (2 * (std::pow(u3, 2) - 2 * u3 + 1));
    dN(4, 2) = (u1 + u2 + 1) * (-u1 * u2 * u3 + u1 * u2 * (u3 - 1) + std::pow(u3 - 1, 2))
               / (4 * std::pow(u3 - 1, 2));
    dN(5, 2) = (std::pow(u1, 2) * u2 + u2 * std::pow(u3, 2) - 2 * u2 * u3 + u2 + 2 * std::pow(u3, 3)
                - 6 * std::pow(u3, 2) + 6 * u3 - 2)
               / (2 * (std::pow(u3, 2) - 2 * u3 + 1));
    dN(6, 2) = (-u1 + u2 + 1) * (u1 * u2 * u3 - u1 * u2 * (u3 - 1) + std::pow(u3 - 1, 2))
               / (4 * std::pow(u3 - 1, 2));
    dN(7, 2) = (-u1 * std::pow(u2, 2) / 2 - u1 * std::pow(u3, 2) / 2 + u1 * u3 - u1 / 2
                + std::pow(u3, 3) - 3 * std::pow(u3, 2) + 3 * u3 - 1)
               / (std::pow(u3, 2) - 2 * u3 + 1);
    dN(8,
       2) = (u3 * (u1 - u3 + 1) * (u2 - u3 + 1)
             + (u3 - 1) * (u3 * (u1 - u3 + 1) + u3 * (u2 - u3 + 1) - (u1 - u3 + 1) * (u2 - u3 + 1)))
            / std::pow(u3 - 1, 2);
    dN(9,
       2) = (-u3 * (u1 + u3 - 1) * (u2 - u3 + 1)
             + (u3 - 1) * (-u3 * (u1 + u3 - 1) + u3 * (u2 - u3 + 1) + (u1 + u3 - 1) * (u2 - u3 + 1)))
            / std::pow(u3 - 1, 2);
    dN(10,
       2) = (u3 * (u1 + u3 - 1) * (u2 + u3 - 1)
             - (u3 - 1) * (u3 * (u1 + u3 - 1) + u3 * (u2 + u3 - 1) + (u1 + u3 - 1) * (u2 + u3 - 1)))
            / std::pow(u3 - 1, 2);
    dN(11,
       2) = (-u3 * (u1 - u3 + 1) * (u2 + u3 - 1)
             + (u3 - 1) * (u3 * (u1 - u3 + 1) - u3 * (u2 + u3 - 1) + (u1 - u3 + 1) * (u2 + u3 - 1)))
            / std::pow(u3 - 1, 2);

    dN(12, 2) = 4 * u3 - 1;

    return {N, dN};
}

}
